{
  "projects": [
    {
      "id": "p1",
      "slug": "c-evm-exec",
      "title": "cEvmExec",
      "date": "2025-01-01",
      "summary": "A tool to call smart contracts on EVM-compatible chains.",
      "coverImage": "/c-evm-tool_image.svg",
      "tags": [
        "Blockchain",
        "EVM",
        "Tool"
      ],
      "links": {
        "demo": "https://ksvirsky.github.io/c-evm-exec",
        "repo": ""
      },
      "content": "## Project Overview\n\nThroughout the software development lifecycle of a web3 application, especially when developing or debugging smart contracts, you may need to quickly test what a contract function returns (or what it returned at a specific block) or change a smart contract parameter by calling an administrative method. This is particularly useful when a user interface (UI) for these actions has not yet been implemented.\n\nWhile unit tests cover sophisticated use cases, it's often necessary to interact with a contract instance deployed on a live blockchain. Writing and executing a script for these tasks can be more tedious than simply copy-pasting a function signature and specifying its parameters.\n\n**cEvmExec** is the ideal tool for this. It allows a user to quickly execute a smart contract method (read or write) and save or share the call for future use.\n\nThe following features are currently implemented:\n* Prepare a **read call** to a smart contract to quickly retrieve information from the chain.\n* Prepare a **write call** and share it with another user. This is helpful when a UI is unavailable or when entering the correct parameters requires precision. The recipient just needs to open the shared URL, connect their wallet, and execute the transaction.\n* Supports **multiple chains** and allows you to specify a custom RPC provider.\n* Supports both **human-readable and JSON ABIs**.\n* Stores a **history of requests** in local storage so you can easily reuse them."
    },
    {
      "id": "p2",
      "slug": "payment-escrow-demo",
      "title": "Payment Escrow Demo",
      "date": "2025-01-01",
      "summary": "Demo application for payment escrow smart contract.",
      "coverImage": "/payment-escrow-demo_image.png",
      "tags": [
        "Blockchain",
        "EVM",
        "Payment"
      ],
      "links": {
        "demo": "https://ksvirsky.github.io/payment-escrow-demo",
        "repo": "https://github.com/ksvirsky/payment-escrow"
      },
      "content": "## Project Overview\n\nThis project implements a basic payment escrow functionality, enabling the secure transfer of funds between two parties. The applicationâ€™s intent is to demonstrate upgradeability approach in smart contracts to support multiple implementations in the factory contract without the necessity of redeploying the entire contract set.\n\n## Demo & Testing on Polygon Amoy\n\nYou can test the contract functionality using a deployed demo UI on the Polygon Amoy testnet:\n\n* **Demo UI:** [https://ksvirsky.github.io/payment-escrow-demo/](https://ksvirsky.github.io/payment-escrow-demo/)\n\n### Deployed Contract Addresses on Polygon Amoy:\n\n* **PaymentEscrowFactory Address:** `0x9a91dCbf35E5a8d929970A1c81aCcAa8875764Ec`\n* **Mock ERC-20 Token Contract:** `0xD629B37f222deDE7e405f2a4aA678C6423e3b9b7`\n\nTo obtain mock tokens for testing:\n* Use the `mint(address, uint)` method on the Mock ERC-20 token contract.\n* **Convenient Minting Tool:** [https://ksvirsky.github.io/c-evm-exec?chainId=80002&address=0xD629B37f222deDE7e405f2a4aA678C6423e3b9b7&signature=mint%28address+a%2C+uint256+amount%29&args=0xYourAddress%2C+1000000000000000000000000&mode=write](https://ksvirsky.github.io/c-evm-exec?chainId=80002&address=0xD629B37f222deDE7e405f2a4aA678C6423e3b9b7&signature=mint%28address+a%2C+uint256+amount%29&args=0xYourAddress%2C+1000000000000000000000000&mode=write)\n    *(Remember to replace `0xYourAddress` in the `args` with your actual Polygon Amoy wallet address when using the tool.)*"
    },
    {
      "id": "p3",
      "slug": "tg-bot-mgr",
      "title": "Telegram Bot Manager",
      "date": "2025-01-01",
      "summary": "Web application to provide basic chat functionality for Telegram bot",
      "coverImage": "/tg-bot-mgr_image.png",
      "tags": [
        "Telegram",
        "Web",
        "Bot"
      ],
      "links": {
        "demo": "https://ksvirsky.github.io/tg-bot-mgr",
        "repo": ""
      },
      "content": "## Project Overview\n\nThis project is a web application that enables Telegram bot account to serve as a chat bot. It monitors Telegram update events and shows messages that are sent to the bot.\nIt supports the following use-cases:\n - shows a chat of user that sent a message;\n - stores all the data to local-storage to provide basic persistence;\n - allows to set auto-replies on user commands;\n - send broadcast messages to all or specified users;\n - supports multiple bot accounts;\n - fetch user info;\n - supports wildcard %username%, %first-name% in replies;\n - dark/light themes.\n\nIt can be used in emergency cases when bot service is not working, but client requests should be handled immediately."
    },
    {
      "id": "p4",
      "slug": "trustless-deployer",
      "title": "Trustless Smart Contract Deployer",
      "date": "2025-08-23",
      "summary": "Web application to provide trustless deployment of smart contracts",
      "coverImage": "/trustless-deployer_image.png",
      "tags": [
        "Blockchain",
        "Web",
        "EVM",
        "Smart Contracts",
        "Deployment"
      ],
      "links": {
        "demo": "https://ksvirsky.github.io/trustless-deployer",
        "repo": ""
      },
      "content": "## Project Overview\n\n\nIn some cases, a dApp may need to support multiple blockchains. It can be tricky to decide which chains to deploy on first. Generally, the application owner is responsible for deploying the smart contracts to provide support for a new chain. However, for very simple, single-contract deployments, it may be sufficient to allow a user to trustlessly deploy the smart contract themselves.\n\nThe Trustless Deployer is a web application that provides this functionality. Instead of deploying the contracts, the application owner can prepare a deployment configuration and delegate this action to the interested party. Once the party funds a required address with the native token and submits the prepared transaction, the contract address will be known.\n\nThe application has the following features:\n - Prepares a configuration for trustless smart contract deployment.\n - Generates initialization data for a contract constructor to be passed  during deployment.\n - Allows configuration of additional deployment parameters, such as gas price, gas limit, and v, r, s parameters.\n - Prepares and shares a link for future deployment.\n - Calculates and displays the amount of native token required to fund the deployer account and allows to fund the account.\n - Submits a transaction to deploy smart contract."
    }
  ]
}